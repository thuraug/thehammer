#!/bin/bash

# I WANT TO DIE 

### variables ###
whoami=`whoami`
storageSystem=
tier=
loadType=
pathToResults="/var/LOAD_TEST_RESULTS/"
pathToStorage=''
pathToScripts="/ansible/loadtest/scripts/"
pathToAnsible="/ansible/loadtest/"

usage ()
{
	echo
	echo "This script is used to test a list of systems as specified in /etc/ansible/loadtest/Clients_Config"
	echo "There is a choice to use either fio or frametest on either GPFS or Vast storage"
	echo " Usage: echo `basename $0` [-h|-help]"
		echo " -h | show the help menu"
		echo " -G | GPFS Storage"
		echo " -V | Vast Storage"
		echo "-Nv | NVME Tier -- this flag must be used with the '-G' flag"
		echo "-Nl | NLSAS Tier -- this flag must be used with the '-G' flag" 
		echo " -S | SAS Tier -- this flag must be used with the '-G' flag" 
		echo "-Fr | frametest load testing"
		echo "-Fi | fio load testing"
}

### Check Flags ###
#if [ $# -gt 0 ]
#then
#	{
#		case "{$1}" in
#			-[h] )
#				usage
#				;;
#			-[G] )
#				storageSystem="gpfs"
#				;;
#			-[V] )
#				storageSystem="vast"
#				;;
#			* )
#				usage
#				;;
#		esac
#		case "{$2}" in
#			-[Nv] )
#				tier="NVME"
#				;;
#			-[Nl] )
#				tier="NLSAS"
#				;;
#
#			-[S] )
#				tier="SAS"
#				;;
#			* )
#				usage
#				;;
#		esac
#		case "{$3}" in
#			-[Fr] )
#				loadType="frametest"
#				;;
#			-[Fi] )
#				loadType="fio"
#				;;
#			* )
#				usage
#				;;
#		esac
#	}
#fi

Ask_Questions ()
{
	read -p "What type of storage?" storageSystem
	if [ $storageSystem == "gpfs" ]
	then
		read -p "What tier you on?" tier
	fi
	read -p "What load test?" loadType
}


# Step 0: Check requirements
	### MAKE THESE FLAGS ###
	# what type of storage --> for GPFS also ask for tiers
	# what type of test

Configure_Path_To_Storage ()
{
	if [[ $storageSystem == "gpfs" ]]
	then
		pathToStorage="/mmfs1/${tier}/${loadType}/"
	else
		pathToStorage="/vast"
	fi
	
}

# Step 1: Configure the Host List in /etc/ansible hosts

Configure_Hosts ()
{
	if [ `wc -l < ${pathToAnsible}Clients_Config` == 0 ]
	then
		echo "Please provide the lists of hosts you would like to test on in the ${pathToAnsible}Client_Config File"
		exit
	else
		${pathToAnsible}host_sorting.sh	
	fi
	
	echo "####################"
	echo "# HOSTS CONFIGURED #"
	echo "####################"
}

# Step 2: Configure LocalHost directories
	#/var/LOAD_TEST_RESULTS/Client_2/Client_2_set1

Create_Results_Directories ()
{
	[ ! -d ${pathToResults} ] && mkdir ${pathToResults}
	
	for (( i=1; i<=`wc -l < ${pathToAnsible}Clients_Config`; i++ ))
	do
		directory="Client_${i}"
		[ ! -d ${pathToResults}${directory} ] && mkdir ${pathToResults}${directory}
	done
	
	for line in `cat /etc/ansible/hosts | grep Client_`
	do
		[ ! -d ${pathToResults}${line:1:8}/${line:1:-1} ] && mkdir ${pathToResults}${line:1:8}/${line:1:-1}  
	done
}

# Step 3: Configure Remote Systems for testing
	# Check to make sure storage is mounted
	# Check to make sure folder for loadtest is made /mmfs1/NVME/frametest/$HOSTNAME
	# Prepare Results directory
	# Send scripts over to remote hosts
	# Make sure frametest and fio are on remote systems

Run_Host_Config ()
{
	ansible-playbook ${pathToAnsible}host_config.yaml --extra-vars "hosts=Clients_All pathToStorage=$pathToStorage pathToResults=$pathToResults storageSystem=$storageSystem loadType=$loadType pathToScripts=$pathToScripts"
}




# Step 3: execute load script
	### MAKE SURE LOADTEST SCRIPTS ARE MADE ###
	# Execute load shell script
	# send results back to localhost

Run_Single_Hammer ()
{
	ansible-playbook ${pathToAnsible}single_hammer.yaml --extra-vars "pathToScript=$pathToScript hosts=Clients_All pathToStorage=$pathToStorage testType=$loadType pathToResults=$pathToResults systemStorage=$systemStorage"
}

	

# Step 4: Coalate and Review Results of load tests

Compare_Single_Results ()
{
	for client in ${pathToResults}Client_1
	do
		ipAddress=$client
		fullPathToResults=${pathToResults}Client_1/${ipAddress}/
		tempFile=/tmp/temp.txt
		highNum=
		highFile=
		comparingArray=()
		array=''

		ls ${fullPathToResults} > /$tempFile
		
		for (( i=1; i<=`wc -; < ${tempFile}`-1; i++))
		do
			file1=`sed -n ${i}p $tempFile`
			firstNum=`sed -n 9p ${fullPathToResults}&{file1}`
			comparingArray+=${firstNum:10:-8}
			array+=${firstNum:10:-8}"-"$file1" "
		done
		
		highNum=`echo $comparingArray | head -n1 | awk '{print $1}'`
		
		for i in ${comparingArray}
		do
			if [[ "$i" -gt "$highNum" ]]
			then
				highNum=$i
			fi
		done
		
		length=`echo -n $highNum | wc -c`
		
		for i in $array
		do
			if [[ $highNum == ${i:0:$length} ]]
			then
				highFile=$i
			fi

		done

	Create_Optimal_Test	$highFile $fullPathToResults			
	
	


	



	done	
}





# Step 5: Create "optimal load test" 

Create_Optimal_Test ()
{
	fileString=$1
	fullPathToResults=$2
	wParameter=
	tParameter=
	wValue1=
	wValue2=
	tValue1=
	tValue2=

	for w in 
	

	

}





# Step 6: Re-run the load test using optimal versions to make sure that they are the best version
	# (+/-) 5% difference

# Step 7: if it is good then load that as the "ultimate optimal version to be used for all other tests (with +/- the parameters )

# Step 8: remove all hosts from /etc/ansible/hosts

Delete_Hosts ()
{
	startNum=''
	endNum=`wc -l < /etc/ansible/hosts`	

	for ((i=1; i<=`wc -l < /etc/ansible/hosts`; i++))
	do
		hold=`sed -n ${i}p /etc/ansible/hosts`
		if [[ ${hold} == "[Clients_All]" ]]
		then
			startNum=$i
		fi
	done

	sed -i ${startNum},${endNum}d /etc/ansible/hosts
}




Main ()
{
	Ask_Questions
	Configure_Path_To_Storage
	Configure_Hosts
	Create_Results_Directories
	Run_Host_Config
	Run_Single_Hammer

	Delete_Hosts
}
Main
for w in $(seq 1 ${#highFile})
do

	if [ "${highFile:$w:1}" == "w" ]
	then
		wValue1=$[ $w + 1]
	fi
	if [ "${highFile:$w:1}" == "t" ]
	then
		wValue2=$w
		wParameter="${highFile:$wValue1:$[ wValue2 - wValue1 ]}"
	fi
done	

for t in $(seq 1 ${#highFile})
do
	if [ "${highFile:$t:1}" == "t" ]
	then
		tValue1=$[ $t + 1]
	fi
	if [ "${highFile:$t:1}" == "." ]
	then
		tValue2=$t
		tParameter="${highFile:$tValue1:$[ tValue2 - tValue1 ]}"
	fi
done



echo $wParameter
echo $tParameter


sed -i 's/wParameters="2k 4k 90000 125000"/wParameter='${wParameter}'/g' /ansible/loadtest/scripts/frametest_192.168.10.104_optimal.sh
sed -i 's/tParameters="4 8 12 16"/tParameter='${tParameter}'/g' /ansible/loadtest/scripts/frametest_192.168.10.104_optimal.sh

